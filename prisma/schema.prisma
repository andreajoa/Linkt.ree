generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  avatar        String?
  background    String?   @default("gradient-cosmic")
  template      String    @default("glassmorphism")
  theme         String    @default("dark")
  isPremium     Boolean   @default(false)
  plan          String    @default("free")
  planExpires   DateTime?
  stripeCustomerId String?
  customDomain  String?   @unique
  aiCredits     Int       @default(10)
  storageUsed   Float     @default(0.0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts Account[]
  sessions Session[]
  pages    Page[]
  payments Payment[]
  subscriptions Subscription[]
  abTests  ABTest[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Páginas (Link Trees)
model Page {
  id            String    @id @default(cuid())
  userId        String
  slug          String    @unique
  title         String?
  description   String?
  isPublic      Boolean   @default(true)
  seoTitle      String?
  seoDescription String?
  customDomain  String?
  themeConfig   Json?
  favicon       String?
  password      String?
  expiresAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  blocks        Block[]
  analytics     PageView[]
  abTests       ABTest[]
  
  @@index([userId])
  @@index([slug])
}

// Blocos (Links, Text, Media, etc.)
model Block {
  id          String   @id @default(cuid())
  pageId      String
  type        String   // link, text, image, video, social, payment, product, email_capture, embed
  position    Int
  title       String?
  data        Json     // Dados específicos do bloco
  style       Json?    // Estilos customizados
  isActive    Boolean  @default(true)
  clicks      Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  page        Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  analytics   BlockClick[]
  
  @@index([pageId, position])
}

// Produtos para E-commerce
model Product {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  price       Float
  currency    String   @default("USD")
  images      String // JSON string com array de URLs
  inventory   Int?
  isDigital   Boolean  @default(false)
  downloadUrl String?
  isActive    Boolean  @default(true)
  stripeProductId String?
  stripePriceId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  orders      OrderItem[]
  
  @@index([userId])
}

// Pedidos
model Order {
  id            String      @id @default(cuid())
  userId        String
  email         String
  total         Float
  currency      String      @default("USD")
  status        String      @default("pending") // pending, paid, failed, refunded
  stripePaymentId String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  items         OrderItem[]
  
  @@index([userId])
  @@index([email])
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int    @default(1)
  price     Float
  
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

// Pagamentos
model Payment {
  id              String   @id @default(cuid())
  userId          String
  stripePaymentId String   @unique
  amount          Float
  currency        String   @default("USD")
  status          String   // succeeded, pending, failed
  type            String   // subscription, one_time, donation
  metadata        Json?
  createdAt       DateTime @default(now())
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// Assinaturas
model Subscription {
  id                 String   @id @default(cuid())
  userId             String
  stripeSubscriptionId String @unique
  stripePriceId      String
  status             String   // active, canceled, past_due, etc.
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// Analytics avançados
model PageView {
  id        String   @id @default(cuid())
  pageId    String
  ip        String?
  userAgent String?
  referrer  String?
  country   String?
  city      String?
  device    String?
  browser   String?
  os        String?
  timestamp DateTime @default(now())
  sessionId String?
  duration  Int?     // em segundos
  
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  
  @@index([pageId])
  @@index([timestamp])
  @@index([sessionId])
}

model BlockClick {
  id        String   @id @default(cuid())
  blockId   String
  pageId    String
  ip        String?
  userAgent String?
  referrer  String?
  country   String?
  city      String?
  device    String?
  browser   String?
  os        String?
  timestamp DateTime @default(now())
  sessionId String?
  
  block     Block    @relation(fields: [blockId], references: [id], onDelete: Cascade)
  
  @@index([blockId])
  @@index([pageId])
  @@index([timestamp])
}

// A/B Testing
model ABTest {
  id          String   @id @default(cuid())
  userId      String
  pageId      String?
  name        String
  description String?
  status      String   @default("draft") // draft, running, completed, paused
  startDate   DateTime?
  endDate     DateTime?
  variants    Json     // Array de variantes
  metrics     Json?    // Métricas coletadas
  winner      String?  // ID da variante vencedora
  confidence  Float?   // Nível de confiança
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  page        Page?    @relation(fields: [pageId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([pageId])
}

// Integrações com redes sociais
model SocialIntegration {
  id          String   @id @default(cuid())
  userId      String
  platform    String   // instagram, youtube, tiktok, spotify, etc.
  accessToken String?
  refreshToken String?
  expiresAt   DateTime?
  username    String?
  profileData Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([userId, platform])
  @@index([userId])
}

// Templates customizados
model Template {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String   // glassmorphism, neumorphism, cyberpunk, minimal, etc.
  config      Json     // Configuração do template
  preview     String?  // URL da imagem de preview
  isPremium   Boolean  @default(false)
  isPublic    Boolean  @default(true)
  createdBy   String?  // userId do criador
  downloads   Int      @default(0)
  rating      Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([category])
  @@index([isPremium])
}

// Media files (imagens, vídeos, etc.)
model MediaFile {
  id        String   @id @default(cuid())
  userId    String
  filename  String
  originalName String
  mimeType  String
  size      Int      // em bytes
  url       String
  thumbnail String?
  metadata  Json?    // Dimensões, duração, etc.
  createdAt DateTime @default(now())
  
  @@index([userId])
}

// Email captures
model EmailCapture {
  id        String   @id @default(cuid())
  pageId    String
  email     String
  name      String?
  metadata  Json?    // Campos customizados
  source    String?  // De qual bloco veio
  timestamp DateTime @default(now())
  
  @@index([pageId])
  @@index([email])
}

// Webhooks
model Webhook {
  id        String   @id @default(cuid())
  userId    String
  url       String
  events    String // JSON string com array de eventos
  secret    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  @@index([userId])
}
