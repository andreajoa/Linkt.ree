generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  avatar        String?
  background    String?   @default("gradient-cosmic")
  template      String    @default("glassmorphism")
  theme         String    @default("dark")
  isPremium     Boolean   @default(false)
  plan          String    @default("free")
  planExpires   DateTime?
  stripeCustomerId String?
  customDomain  String?   @unique
  aiCredits     Int       @default(10)
  storageUsed   Float     @default(0.0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts Account[]
  sessions Session[]
  pages    Page[]
  payments Payment[]
  subscriptions Subscription[]
  abTests  ABTest[]
  links    Link[]
  socials  Social[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Page {
  id          String   @id @default(cuid())
  userId      String
  slug        String   @unique
  title       String
  description String?
  isPublic    Boolean  @default(true)
  seoTitle    String?
  seoDescription String?
  customDomain String? @unique
  themeConfig String? // JSON string
  favicon     String?
  password    String?
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  blocks Block[]
  views  PageView[]
  
  @@index([userId])
  @@index([slug])
}

model Block {
  id        String   @id @default(cuid())
  pageId    String
  type      String   // link, social, product, etc.
  position  Int
  title     String
  data      String?  // JSON string
  style     String?  // JSON string
  isActive  Boolean  @default(true)
  clickCount Int     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  page      Page        @relation(fields: [pageId], references: [id], onDelete: Cascade)
  clicks    BlockClick[]
  
  @@index([pageId])
}

model Link {
  id          String   @id @default(cuid())
  userId      String
  title       String
  url         String
  description String?
  clicks      Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model Social {
  id        String   @id @default(cuid())
  userId    String
  platform  String
  username  String
  url       String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model Product {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  price       Float
  currency    String   @default("USD")
  images      String // JSON string com array de URLs
  inventory   Int?
  isDigital   Boolean  @default(false)
  downloadUrl String?
  isActive    Boolean  @default(true)
  stripeProductId String?
  stripePriceId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  orders      OrderItem[]
  
  @@index([userId])
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  total     Float
  currency  String   @default("USD")
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  items OrderItem[]
  
  @@index([userId])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([orderId])
  @@index([productId])
}

model Payment {
  id            String   @id @default(cuid())
  userId        String
  amount        Float
  currency      String   @default("USD")
  status        String   @default("pending")
  stripePaymentId String?
  type          String   @default("one_time")
  metadata      String?  // JSON string
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model Subscription {
  id            String   @id @default(cuid())
  userId        String
  stripeSubscriptionId String @unique
  status        String
  plan          String
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model PageView {
  id        String   @id @default(cuid())
  pageId    String
  ip        String?
  userAgent String?
  referer   String?
  country   String?
  city      String?
  device    String?
  browser   String?
  os        String?
  createdAt DateTime @default(now())
  
  page Page @relation(fields: [pageId], references: [id], onDelete: Cascade)
  
  @@index([pageId])
  @@index([createdAt])
}

model BlockClick {
  id        String   @id @default(cuid())
  blockId   String
  ip        String?
  userAgent String?
  referer   String?
  createdAt DateTime @default(now())
  
  block Block @relation(fields: [blockId], references: [id], onDelete: Cascade)
  
  @@index([blockId])
  @@index([createdAt])
}

model ABTest {
  id        String   @id @default(cuid())
  userId    String
  name      String
  variants  String   // JSON string
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model SocialIntegration {
  id        String   @id @default(cuid())
  userId    String
  platform  String
  accessToken String
  refreshToken String?
  expiresAt DateTime?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
}

model Template {
  id          String   @id @default(cuid())
  name        String
  category    String
  description String?
  preview     String?
  config      String   // JSON string
  isPremium   Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([category])
}

model MediaFile {
  id        String   @id @default(cuid())
  userId    String
  filename  String
  url       String
  size      Int
  mimeType  String
  createdAt DateTime @default(now())
  
  @@index([userId])
}

model EmailCapture {
  id        String   @id @default(cuid())
  pageId    String
  email     String
  name      String?
  createdAt DateTime @default(now())
  
  @@index([pageId])
  @@index([email])
}

model Webhook {
  id        String   @id @default(cuid())
  userId    String
  url       String
  events    String // JSON string com array de eventos
  secret    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  @@index([userId])
}